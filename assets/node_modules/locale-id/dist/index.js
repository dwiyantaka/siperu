'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parse;
exports.getLanguage = getLanguage;
exports.getCountry = getCountry;
exports.getScript = getScript;
exports.getVariant = getVariant;
exports.getKeyword = getKeyword;
exports.normalize = normalize;
exports.normalizeAcceptLanguage = normalizeAcceptLanguage;
exports.prepareSupported = prepareSupported;
exports.getBest = getBest;

var _capitalize = require('lodash/capitalize');

var _capitalize2 = _interopRequireDefault(_capitalize);

var _forEach = require('lodash/forEach');

var _forEach2 = _interopRequireDefault(_forEach);

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _debug2.default)('locale-id');

// http://userguide.icu-project.org/locale
function parse(locale) {
  if (!locale) {
    return void 0;
  }

  // extract keyword
  var stringLocale = String(locale);
  var keywordPos = stringLocale.indexOf('@');

  var keyword = keywordPos !== -1 ? stringLocale.substr(keywordPos + 1) : void 0;

  var localeWithoutKeyword = keywordPos !== -1 ? stringLocale.substr(0, keywordPos) : stringLocale;

  // en-us => en_us
  var parts = String(localeWithoutKeyword).replace(/-/g, '_').split('_');

  if (!parts.length || parts.length > 4) {
    return void 0;
  }

  var language = parts.shift();
  if (!language) {
    return void 0;
  }

  var retVar = {
    keyword: keyword,
    language: language.toLowerCase()
  };

  if (!parts.length) {
    return retVar;
  }

  if (parts.length === 3) {
    var variant = parts.pop();
    if (variant) {
      retVar.variant = variant.toUpperCase();
    }
  }

  var country = parts.pop();
  if (country.length > 3) {
    retVar.keyword = country;

    country = parts.pop();
  }

  if (country) {
    retVar.country = country.toUpperCase();
  }

  if (!parts.length) {
    return retVar;
  }

  var script = parts.pop();
  if (script) {
    retVar.script = (0, _capitalize2.default)(script.toLowerCase());
  }

  return retVar;
}

function getLanguage(locale) {
  var obj = parse(locale);
  return obj ? obj.language : void 0;
}

function getCountry(locale) {
  var obj = parse(locale);
  return obj ? obj.country : void 0;
}

function getScript(locale) {
  var obj = parse(locale);
  return obj ? obj.script : void 0;
}

function getVariant(locale) {
  var obj = parse(locale);
  return obj ? obj.variant : void 0;
}

function getKeyword(locale) {
  var obj = parse(locale);
  return obj ? obj.keyword : void 0;
}

function normalize(locale) {
  var delimeter = arguments.length <= 1 || arguments[1] === undefined ? '_' : arguments[1];

  var obj = parse(locale);
  if (!obj) {
    return obj;
  }

  var result = obj.language;

  if (obj.script) {
    result += '' + delimeter + obj.script;
  }

  if (obj.country) {
    result += '' + delimeter + obj.country;
  }

  return result;
}

var splitAcceptLanguageRegEx = /([a-z]{1,8}(-[a-z]{1,8})?)\s*(;\s*q\s*=\s*(1|0\.[0-9]+))?/ig;
var acceptLanguageItemRegEx = /^([a-z]{1,8}(-[a-z]{1,8})?)/i;

function normalizeAcceptLanguage(acceptLanguage) {
  var returnItems = [];
  if (!acceptLanguage) {
    return returnItems;
  }

  var items = acceptLanguage.match(splitAcceptLanguageRegEx) || [];
  (0, _forEach2.default)(items, function (acceptLanguageItem) {
    var matches = acceptLanguageItem.match(acceptLanguageItemRegEx) || [];
    var locale = normalize(matches[0]);
    if (locale) {
      returnItems.push(locale);
    }
  });

  return returnItems;
}

function prepareSupported(supported) {
  var lgs = {};

  (0, _forEach2.default)(supported, function (supportedLocale) {
    var _parse = parse(supportedLocale);

    var language = _parse.language;
    var country = _parse.country;

    if (!language) {
      throw new Error('Locale ' + supportedLocale + ' is not parsable');
    }

    if (!lgs[language]) {
      lgs[language] = {
        countries: {},
        firstCountry: void 0,
        main: void 0
      };
    }

    var lg = lgs[language];
    if (country) {
      lg.countries[country] = supportedLocale;

      if (!lg.firstCountry) {
        lg.firstCountry = supportedLocale;
      }
    } else {
      lg.main = supportedLocale;
    }
  });

  return lgs;
}

function getBest(supported, locale, defaultLocale, getAnyCountry) {
  var lgs = (0, _isArray2.default)(supported) ? prepareSupported(supported) : supported;

  // return defaultLocale if current locale is undefined
  if (!locale && defaultLocale) {
    return getBest(supported, defaultLocale, void 0, getAnyCountry);
  }

  if (!locale) {
    log('Locale ' + locale + ' is not supported');
    return void 0;
  }

  var _parse2 = parse(locale);

  var language = _parse2.language;
  var country = _parse2.country;

  if (!language) {
    return defaultLocale;
  }

  // selected locale is not supported
  if (!lgs[language]) {
    log('Locale ' + locale + ' is not supported');

    if (locale === defaultLocale) {
      return void 0;
    }

    return getBest(supported, defaultLocale, null, getAnyCountry);
  }

  var _lgs$language = lgs[language];
  var countries = _lgs$language.countries;
  var _lgs$language$main = _lgs$language.main;
  var main = _lgs$language$main === undefined ? defaultLocale : _lgs$language$main;
  var firstCountry = _lgs$language.firstCountry;

  if (!countries || !country) {
    if (getAnyCountry && firstCountry) {
      return firstCountry;
    }

    return main;
  }

  if (getAnyCountry && firstCountry) {
    return countries[country] ? countries[country] : firstCountry;
  }

  return countries[country] ? countries[country] : main;
}